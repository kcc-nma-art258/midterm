/* @section FUNCTIONS */
// function: 自作関数
// @mixinと比べてかなり限定的な使い方をする

/**
 * Type Scale Calculator
 *
 * Create typographic scales
 * @param {$i} increment of scale; 0 is base
 * @param {$scale} scale ratio; defaults to 1.25
 */
@function type-scale($i, $scale: 1.618){
  @return exponent($scale, $i) * 1em;
}

/**
 * rem/em Calculator (ie. em-calc(32px, 16px, 'rem')
 *
 * target / context = result
 * @param {$target}  Target size in pixels (ie. 32px)
 * @param {$context} Font size providing context for proportion, defaults to $base-font)
 * @param {$unit} unit for rem/em output, defaults to 'em'
 */
@function em-calc($target, $context: $base-font, $unit: 'rem'){
  // target / context = result (defaults to rem's)
  @return #{$target/$context} + $unit;
}

/**
 * Exponent Calculator
 *
 * exponent: 指数（掛け算を繰り返す回数）
 * https://gist.github.com/scottkellum/1160816
 * @param {$base} base number
 * @param {$exponent} exponent/power number
 */
@function exponent($base, $exponent) {
  // reset value
  $value: $base;

  // Positive integers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  }

  // Negitive integers get divided.
  // A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  // Return the last value written
  @return ($value);
}
